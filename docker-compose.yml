services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - app-network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka-container
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-container:9092,PLAINTEXT_LOCAL://localhost:9093
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_LOCAL://0.0.0.0:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_LOCAL:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - app-network
    volumes:
      - kafka-data:/var/lib/kafka/data

  mongo:
    image: mongo
    container_name: mongo-container
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=username
      - MONGO_INITDB_ROOT_PASSWORD=password
    networks:
      - app-network
    volumes:
      - mongo-data:/data/db

  mongo-express:
    image: mongo-express
    container_name: mongo-express
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: username
      ME_CONFIG_MONGODB_ADMINPASSWORD: password
      ME_CONFIG_MONGODB_SERVER: mongo-container
      ME_CONFIG_BASICAUTH: false
    depends_on:
      - mongo
    networks:
      - app-network

  producer-service:
    build:
      context: ./producer-service
      dockerfile: Dockerfile
    container_name: producer-service
    ports:
      - "8088:8088"
    depends_on:
      - kafka
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka-container:9092
    networks:
      - app-network

  consumer-service:
    build:
      context: ./consumer-service
      dockerfile: Dockerfile
    container_name: consumer-service
    ports:
      - "8080:8080"
    depends_on:
      - kafka
      - mongo
    environment:
      SPRING_DATA_MONGODB_HOST: mongo-container
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka-container:9092
    networks:
      - app-network

  fluent-bit:
    image: fluent/fluent-bit:latest
    container_name: fluent-bit
    volumes:
      - ./fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf
    ports:
      - "2020:2020"
    networks:
      - app-network
    depends_on:
      - kafka
      - splunk
    restart: always

  splunk:
    image: splunk/splunk:latest
    container_name: splunk
    environment:
      SPLUNK_START_ARGS: --accept-license
      SPLUNK_PASSWORD: password
    ports:
      - "8000:8000"
    networks:
      - app-network
    volumes:
      - splunk_data:/opt/splunk/var

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    networks:
      - app-network
    restart: always

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    networks:
      - app-network
    volumes:
      - ./consumer-service/src/main/resources/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"

networks:
  app-network:
    driver: bridge

volumes:
  kafka-data:
    driver: local
  mongo-data:
    driver: local
  splunk_data:
    driver: local